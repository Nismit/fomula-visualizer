{"version":3,"sources":["fragment.js","App.tsx","vertex.js","serviceWorker.ts","index.tsx"],"names":["fomula","App","props","canvasRef","React","createRef","nisgl","program","vartexShader","fragmentShader","startTime","time","state","draw","bind","resize","handleChangeText","canvas","this","current","width","clientWidth","height","clientHeight","gl","getContext","NISGL","clear","createShader","context","VERTEX_SHADER","compile","FRAGMENT_SHADER","Fragment","createProgram","linkProgram","useProgram","positionBuffer","createBuffer","indexBuffer","createVertexPosition","Float32Array","createVertexIndex","Int16Array","setAttribute","bindBuffer","Date","getTime","console","warn","e","persist","setState","prevState","target","value","tempFragment","isCompiled","detachShader","getProgram","getShader","displayWidth","displayHeight","resolution","viewport","setUniform","drawElements","TRIANGLES","UNSIGNED_SHORT","flush","requestAnimationFrame","className","id","ref","rows","cols","name","placeholder","onChange","href","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93edd5d1.chunk.js","sourcesContent":["export default function (fomula) {\n\treturn `\nprecision mediump float;\nconst float PI = 3.1415926;\nconst vec2 offset = vec2(0.5);\nuniform float time;\nuniform vec2  resolution;\n\n// Ref: https://github.com/ashima/webgl-noise/blob/master/src/noise2D.glsl\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n\t// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n\t// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n\t// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n\t// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n\t// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n\t// Normalise gradients implicitly by scaling m\n\t// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n\t// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n// https://github.com/ashima/webgl-noise/blob/master/src/classicnoise2D.glsl\n//\n// GLSL textureless classic 2D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/stegu/webgl-noise\n//\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec2 P) {\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;  \n  g01 *= norm.y;  \n  g10 *= norm.z;  \n  g11 *= norm.w;  \n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec2 P, vec2 rep) {\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod(Pi, rep.xyxy); // To create noise with explicit period\n  Pi = mod289(Pi);        // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;  \n  g01 *= norm.y;  \n  g10 *= norm.z;  \n  g11 *= norm.w;  \n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\nvec3 hsv(float h, float s, float v){\n\tvec4 t = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(vec3(h) + t.xyz) * 6.0 - vec3(t.w));\n\treturn v * mix(vec3(t.x), clamp(p - vec3(t.x), 0.0, 1.0), s);\n}\n\n// Ref: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// Ref: https://thebookofshaders.com/05/\nfloat plot(vec2 st, float pct){\n  return  smoothstep( pct-0.02, pct, st.y) -\n          smoothstep( pct, pct+0.02, st.y);\n}\n\n// Ref: https://thebookofshaders.com/10/\nfloat random (vec2 st) {\n\treturn fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nfloat function(in float x, in vec2 uv) {\n\tfloat y = 0.;\n\t${fomula}\n\treturn y;\n}\n\nvoid main() {\n\tvec2 uv = (gl_FragCoord.xy / resolution.xy) - offset;\n\tuv *= 2.5;\n\n\tvec3 color = vec3(0.0);\n\tvec3 white = vec3(1.0);\n\n\t// Plot\n\tfloat line = plot(uv, function(uv.x, uv));\n\tcolor = (1.0 - line) * color + line * white;\n\n\tgl_FragColor = vec4(color, 1.0);\n}`\n};\n","import React from 'react';\nimport { NISGL, NISGLProgram, NISGLShader } from 'nisgl-ts';\nimport Vertex from './vertex';\nimport Fragment from './fragment';\n\ntype Props = {}\ninterface State {\n  fomula: string;\n}\n\nexport default class App extends React.Component<Props, State> {\n  private canvasRef = React.createRef<HTMLCanvasElement>();\n  private nisgl?: NISGL;\n  private program?: NISGLProgram | null;\n  private vartexShader?: NISGLShader | null;\n  private fragmentShader?: NISGLShader | null;\n  private startTime: number = 0;\n  private time: number = 0;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.draw = this.draw.bind(this);\n    this.resize = this.resize.bind(this);\n    this.handleChangeText = this.handleChangeText.bind(this);\n  }\n\n  state: State = {\n    fomula: ''\n  }\n\n  componentDidMount() {\n    const canvas = this.canvasRef.current;\n    if(canvas !== null) {\n      this.canvasRef.current!.width = canvas.clientWidth;\n      this.canvasRef.current!.height = canvas.clientHeight;\n    }\n\n    const gl: any = this.canvasRef.current?.getContext('webgl');\n\n    if(gl === null) {\n      console.warn(`Canvas did'nt  initalized or Something went wrong.`);\n      return;\n    }\n\n    this.nisgl = new NISGL(gl);\n    this.nisgl.clear();\n    this.vartexShader = this.nisgl.createShader(this.nisgl.context.VERTEX_SHADER)!;\n    this.vartexShader.compile(Vertex);\n    this.fragmentShader = this.nisgl.createShader(this.nisgl.context.FRAGMENT_SHADER)!;\n    this.fragmentShader.compile(Fragment(''));\n\n    this.program = this.nisgl.createProgram();\n\n    if(this.vartexShader === null || this.fragmentShader === null || this.program === null) {\n      return;\n    }\n\n    this.program.linkProgram([this.vartexShader, this.fragmentShader]);\n    this.nisgl.useProgram(this.program);\n\n    const positionBuffer = this.nisgl.createBuffer()!;\n    const indexBuffer = this.nisgl.createBuffer()!;\n    positionBuffer.createVertexPosition(\n      new Float32Array([\n        -1.0, 1.0, 0.0,\n        1.0, 1.0, 0.0,\n        -1.0, -1.0, 0.0,\n        1.0, -1.0, 0.0\n      ])\n    );\n\n    indexBuffer.createVertexIndex(\n      new Int16Array(\n        [\n          0, 2, 1,\n          1, 2, 3\n        ]\n      )\n    );\n\n    if(positionBuffer === null || indexBuffer === null) {\n      return;\n    }\n\n    this.program.setAttribute('position', 3, positionBuffer);\n    indexBuffer.bindBuffer('index');\n\n    this.startTime = new Date().getTime();\n    this.draw();\n  }\n\n  // Ref: https://stackoverflow.com/questions/49500255/warning-this-synthetic-event-is-reused-for-performance-reasons-happening-with\n  handleChangeText(e: React.ChangeEvent<HTMLTextAreaElement>) {\n    e.persist();\n    this.setState(prevState => ({\n      fomula: e.target.value\n    }), () => {\n      try {\n        const gl = this.nisgl?.context;\n        const tempFragment = this.nisgl?.createShader(gl!.FRAGMENT_SHADER);\n        tempFragment?.compile(Fragment(this.state.fomula));\n\n        if(tempFragment?.isCompiled) {\n          gl!.detachShader(this.program!.getProgram, this.fragmentShader!.getShader());\n          this.fragmentShader = tempFragment;\n          this.program!.linkProgram([this.fragmentShader]);\n          this.nisgl!.useProgram(this.program!);\n        }\n      } catch(e) {\n        // console.log(e.message);\n      }\n    });\n  }\n\n  resize() {\n    const displayWidth = this.canvasRef.current!.clientWidth;\n    const displayHeight = this.canvasRef.current!.clientHeight;\n\n    if(displayWidth !== null && displayHeight !== null) {\n      this.canvasRef.current!.width = displayWidth;\n      this.canvasRef.current!.height = displayHeight;\n    }\n  }\n\n  draw() {\n    const canvas: any = this.canvasRef.current;\n    const resolution:any = new Float32Array([canvas.clientWidth * 1.0, canvas.clientHeight * 1.0]);\n    \n    this.time = (new Date().getTime() - this.startTime) * 0.001;\n\n    this.nisgl?.clear();\n    this.nisgl?.context.viewport(0, 0, canvas.clientWidth, canvas.clientHeight);\n\n    this.program?.setUniform('1f', 'time', this.time);\n    this.program?.setUniform('2fv', 'resolution', resolution);\n\n    this.nisgl?.context.drawElements(this.nisgl.context.TRIANGLES, 6, this.nisgl.context.UNSIGNED_SHORT, 0);\n    this.nisgl?.context.flush();\n\n    requestAnimationFrame(this.draw);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <canvas id=\"webgl\" ref={this.canvasRef}></canvas>\n\n        <div className=\"params\">\n          <textarea rows={4} cols={50} name=\"fomula\" placeholder=\"y = sin(x);\" onChange={this.handleChangeText}  value={this.state.fomula} />\n        </div>\n\n        <div className=\"assignedParams\">\n          <p>\n            Assigned Parameters:<br />\n            float time - Count up the elapsed time (0.000)<br />\n            float PI - (3.1415926);<br />\n            vec2 uv - By default, it has been multiplied by 2.5<br />\n            <br />\n            Functions:<br />\n            <a href=\"https://github.com/Nismit/fomula-visualizer/blob/master/src/fragment.js#L33-L79\" target=\"_blank\" rel=\"noopener noreferrer\">float snoise(vec2 v)</a><br />\n            <a href=\"https://github.com/Nismit/fomula-visualizer/blob/master/src/fragment.js#L112-L149\" target=\"_blank\" rel=\"noopener noreferrer\">float cnoise(vec2 P)</a><br />\n            <a href=\"https://github.com/Nismit/fomula-visualizer/blob/master/src/fragment.js#L152-L189\" target=\"_blank\" rel=\"noopener noreferrer\">float pnoise(vec2 P, vec2 rep)</a><br />\n          </p>\n        </div>\n\n        <footer>\n          &copy; Fomula Visualizer | Made by <a href=\"https://github.com/Nismit\" target=\"_blank\" rel=\"noopener noreferrer\">Nismit</a>\n        </footer>\n      </div>\n    );\n  }\n}\n","const Vertex = `\nattribute vec3 position;\n\nvoid main() {\n\tgl_Position = vec4(position, 1.0); \n}`;\n\nexport default Vertex\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}