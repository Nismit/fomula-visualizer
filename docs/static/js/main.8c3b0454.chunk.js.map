{"version":3,"sources":["gl.js","vertex.js","fragment.js","App.js","serviceWorker.js","index.js"],"names":["NISGL","gl","Object","classCallCheck","this","_gl","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","shaders","program","createProgram","forEach","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","data","buffer","createBuffer","bindBuffer","bufferData","STATIC_DRAW","Vertex","fragment","fomula","concat","glPosition","Float32Array","glIndex","Int16Array","App","props","_this","possibleConstructorReturn","getPrototypeOf","call","state","canvas","React","createRef","nisgl","uniform","time","startTime","handleChangeText","bind","assertThisInitialized","resize","draw","e","_this2","persist","setState","prevState","target","value","getGLContext","tempVertex","VERTEX_SHADER","tempFragment","FRAGMENT_SHADER","Fragment","detachShader","push","getUniformLocation","vertexPosition","ARRAY_BUFFER","vertexIndex","ELEMENT_ARRAY_BUFFER","vertexAttrLocation","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","current","getContext","clearColor","Date","getTime","displayWidth","clientWidth","displayHeight","clientHeight","width","height","element","clear","COLOR_BUFFER_BIT","viewport","uniform1f","uniform2fv","drawElements","TRIANGLES","UNSIGNED_SHORT","flush","requestAnimationFrame","react_default","a","createElement","className","id","ref","rows","cols","name","placeholder","onChange","href","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c3b0454.chunk.js","sourcesContent":["// https://webglfundamentals.org/webgl/lessons/ja/webgl-shaders-and-glsl.html\n\nclass NISGL {\n  constructor(gl) {\n    this._gl = gl;\n  }\n\n  getGLContext() {\n    return this._gl;\n  }\n\n  createShader(type, source) {\n    const gl = this._gl;\n    const shader = gl.createShader(type);\n\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n      return shader;\n    } else {\n      return null;\n    }\n  }\n\n  createProgram(shaders) {\n    const gl = this._gl;\n    const program = gl.createProgram();\n\n    shaders.forEach(shader => {\n      gl.attachShader(program, shader);\n    });\n\n    gl.linkProgram(program);\n\n    if (gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      gl.useProgram(program);\n      return program;\n    } else {\n      return null;\n    }\n  }\n\n  createBuffer(type, data) {\n    const gl = this._gl;\n    const buffer = gl.createBuffer();\n\n    // param = new Float32Array(data)\n    // param = new Int16Array(data)\n\n    gl.bindBuffer(type, buffer);\n    gl.bufferData(type, data, gl.STATIC_DRAW);\n    gl.bindBuffer(type, null);\n\n    return buffer;\n  }\n}\n\nexport default NISGL;\n","const Vertex = `\nattribute vec3 position;\n\nvoid main() {\n\tgl_Position = vec4(position, 1.0); \n}`;\n\nexport default Vertex\n","export default function (fomula) {\n\treturn `\nprecision mediump float;\nconst float PI = 3.1415926;\nconst vec2 offset = vec2(0.5);\nuniform float time;\nuniform vec2  resolution;\n\n// Ref: https://github.com/ashima/webgl-noise/blob/master/src/noise2D.glsl\n//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n// \n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v) {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n\t// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n\t// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n\t// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n\t// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n\t// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n\t// Normalise gradients implicitly by scaling m\n\t// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n\t// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\n// https://github.com/ashima/webgl-noise/blob/master/src/classicnoise2D.glsl\n//\n// GLSL textureless classic 2D noise \"cnoise\",\n// with an RSL-style periodic variant \"pnoise\".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-08-22\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/stegu/webgl-noise\n//\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec2 fade(vec2 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise(vec2 P) {\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;  \n  g01 *= norm.y;  \n  g10 *= norm.z;  \n  g11 *= norm.w;  \n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\n// Classic Perlin noise, periodic variant\nfloat pnoise(vec2 P, vec2 rep) {\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\n  Pi = mod(Pi, rep.xyxy); // To create noise with explicit period\n  Pi = mod289(Pi);        // To avoid truncation effects in permutation\n  vec4 ix = Pi.xzxz;\n  vec4 iy = Pi.yyww;\n  vec4 fx = Pf.xzxz;\n  vec4 fy = Pf.yyww;\n\n  vec4 i = permute(permute(ix) + iy);\n\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\n  vec4 gy = abs(gx) - 0.5 ;\n  vec4 tx = floor(gx + 0.5);\n  gx = gx - tx;\n\n  vec2 g00 = vec2(gx.x,gy.x);\n  vec2 g10 = vec2(gx.y,gy.y);\n  vec2 g01 = vec2(gx.z,gy.z);\n  vec2 g11 = vec2(gx.w,gy.w);\n\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\n  g00 *= norm.x;  \n  g01 *= norm.y;  \n  g10 *= norm.z;  \n  g11 *= norm.w;  \n\n  float n00 = dot(g00, vec2(fx.x, fy.x));\n  float n10 = dot(g10, vec2(fx.y, fy.y));\n  float n01 = dot(g01, vec2(fx.z, fy.z));\n  float n11 = dot(g11, vec2(fx.w, fy.w));\n\n  vec2 fade_xy = fade(Pf.xy);\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\n  return 2.3 * n_xy;\n}\n\nvec3 hsv(float h, float s, float v){\n\tvec4 t = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n\tvec3 p = abs(fract(vec3(h) + t.xyz) * 6.0 - vec3(t.w));\n\treturn v * mix(vec3(t.x), clamp(p - vec3(t.x), 0.0, 1.0), s);\n}\n\n// Ref: http://lolengine.net/blog/2013/07/27/rgb-to-hsv-in-glsl\nvec3 hsv2rgb(vec3 c) {\n\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// Ref: https://thebookofshaders.com/05/\nfloat plot(vec2 st, float pct){\n  return  smoothstep( pct-0.02, pct, st.y) -\n          smoothstep( pct, pct+0.02, st.y);\n}\n\n// Ref: https://thebookofshaders.com/10/\nfloat random (vec2 st) {\n\treturn fract(sin(dot(st.xy, vec2(12.9898,78.233))) * 43758.5453123);\n}\n\nfloat function(in float x, in vec2 uv) {\n\tfloat y = 0.;\n\t${fomula}\n\treturn y;\n}\n\nvoid main() {\n\tvec2 uv = (gl_FragCoord.xy / resolution.xy) - offset;\n\tuv *= 2.5;\n\n\tvec3 color = vec3(0.0);\n\tvec3 white = vec3(1.0);\n\n\t// Plot\n\tfloat line = plot(uv, function(uv.x, uv));\n\tcolor = (1.0 - line) * color + line * white;\n\n\tgl_FragColor = vec4(color, 1.0);\n}`\n};\n","import React from 'react';\nimport NISGL from './gl';\nimport Vertex from './vertex';\nimport Fragment from './fragment';\nimport './App.css';\n\n\nconst glPosition = new Float32Array(\n  [\n    -1.0, 1.0, 0.0,\n    1.0, 1.0, 0.0,\n    -1.0, -1.0, 0.0,\n    1.0, -1.0, 0.0\n  ]\n);\nconst glIndex = new Int16Array(\n  [\n    0, 2, 1,\n    1, 2, 3\n  ]\n);\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      fomula: ''\n    }\n\n    this.canvas = React.createRef();\n    this.nisgl = null;\n    this.program = null;\n    this.uniform = [];\n    this.shaders = [];\n    this.time = 0;\n    this.startTime = 0;\n\n    this.handleChangeText = this.handleChangeText.bind(this);\n    this.resize = this.resize.bind(this);\n    this.draw = this.draw.bind(this);\n  }\n\n  // Ref: https://stackoverflow.com/questions/49500255/warning-this-synthetic-event-is-reused-for-performance-reasons-happening-with\n  handleChangeText(e) {\n    e.persist();\n    this.setState(prevState => ({\n      fomula: e.target.value\n    }), () => {\n\n      const gl = this.nisgl.getGLContext();\n\n      const tempVertex = this.nisgl.createShader(gl.VERTEX_SHADER, Vertex);\n      const tempFragment = this.nisgl.createShader(gl.FRAGMENT_SHADER, Fragment(this.state.fomula));\n\n      if (tempVertex && tempFragment) {\n        this.shaders.forEach(shader => {\n          gl.detachShader(this.program, shader);\n        });\n\n        this.shaders = [];\n        this.shaders.push(tempVertex);\n        this.shaders.push(tempFragment);\n\n        this.program = this.nisgl.createProgram(this.shaders);\n\n        this.uniform = [];\n        this.uniform.push(gl.getUniformLocation(this.program, 'time'));\n        this.uniform.push(gl.getUniformLocation(this.program, 'resolution'));\n\n        const vertexPosition = this.nisgl.createBuffer(gl.ARRAY_BUFFER, glPosition);\n        const vertexIndex = this.nisgl.createBuffer(gl.ELEMENT_ARRAY_BUFFER, glIndex);\n        const vertexAttrLocation = gl.getAttribLocation(this.program, 'position');\n        gl.bindBuffer(gl.ARRAY_BUFFER, vertexPosition);\n        gl.enableVertexAttribArray(vertexAttrLocation);\n        gl.vertexAttribPointer(vertexAttrLocation, 3, gl.FLOAT, false, 0, 0);\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndex);\n        // console.log(gl.getParameter(gl.ARRAY_BUFFER_BINDING));\n        // console.log(gl.getParameter(gl.ELEMENT_ARRAY_BUFFER_BINDING));\n      }\n\n    });\n  }\n\n  componentDidMount() {\n    const gl = this.canvas.current.getContext('webgl');\n    this.nisgl = new NISGL(gl);\n\n    this.shaders.push(this.nisgl.createShader(gl.VERTEX_SHADER, Vertex));\n    this.shaders.push(this.nisgl.createShader(gl.FRAGMENT_SHADER, Fragment('')));\n\n    this.program = this.nisgl.createProgram(this.shaders);\n\n    this.uniform.push(gl.getUniformLocation(this.program, 'time'));\n    this.uniform.push(gl.getUniformLocation(this.program, 'resolution'));\n\n    const vertexPosition = this.nisgl.createBuffer(gl.ARRAY_BUFFER, glPosition);\n    const vertexIndex = this.nisgl.createBuffer(gl.ELEMENT_ARRAY_BUFFER, glIndex);\n    const vertexAttrLocation = gl.getAttribLocation(this.program, 'position');\n    gl.bindBuffer(gl.ARRAY_BUFFER, vertexPosition);\n    gl.enableVertexAttribArray(vertexAttrLocation);\n    gl.vertexAttribPointer(vertexAttrLocation, 3, gl.FLOAT, false, 0, 0);\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, vertexIndex);\n    gl.clearColor(0.0, 0.0, 0.0, 1.0);\n    this.startTime = new Date().getTime();\n    this.resize();\n    this.draw();\n  }\n\n  resize() {\n    const displayWidth = this.canvas.current.clientWidth;\n    const displayHeight = this.canvas.current.clientHeight;\n\n    this.canvas.current.width = displayWidth;\n    this.canvas.current.height = displayHeight;\n  }\n\n  draw() {\n    const element = this.canvas.current;\n    const height = element.clientHeight;\n    const width = element.clientWidth;\n    const gl = this.nisgl.getGLContext();\n\n    this.time = (new Date().getTime() - this.startTime) * 0.001;\n\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    gl.viewport(0, 0, width, height);\n\n    gl.uniform1f(this.uniform[0], this.time);\n    gl.uniform2fv(this.uniform[1], [width, height]);\n\n    gl.drawElements(gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0);\n    gl.flush();\n\n    requestAnimationFrame(this.draw);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <canvas id=\"webgl\" ref={this.canvas}></canvas>\n\n        <div className=\"params\">\n          <textarea rows=\"4\" cols=\"50\" name=\"fomula\" placeholder=\"y = sin(x);\" onChange={this.handleChangeText} value={this.state.fomula} />\n        </div>\n\n        <div className=\"assignedParams\">\n          <p>\n            Assigned Parameters:<br />\n            float time - Count up the elapsed time (0.000)<br />\n            float PI - (3.1415926);<br />\n            vec2 uv - By default, it has been multiplied by 2.5<br />\n            <br />\n            Functions:<br />\n            <a href=\"https://github.com/Nismit/fomula-visualizer/blob/master/src/fragment.js#L33-L79\" target=\"_blank\" rel=\"noopener noreferrer\">float snoise(vec2 v)</a><br />\n            <a href=\"https://github.com/Nismit/fomula-visualizer/blob/master/src/fragment.js#L112-L149\" target=\"_blank\" rel=\"noopener noreferrer\">float cnoise(vec2 P)</a><br />\n            <a href=\"https://github.com/Nismit/fomula-visualizer/blob/master/src/fragment.js#L152-L189\" target=\"_blank\" rel=\"noopener noreferrer\">float pnoise(vec2 P, vec2 rep)</a><br />\n          </p>\n        </div>\n\n        <footer>\n          &copy; Fomula Visualizer | Made by <a href=\"https://github.com/Nismit\" target=\"_blank\" rel=\"noopener noreferrer\">Nismit</a>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}